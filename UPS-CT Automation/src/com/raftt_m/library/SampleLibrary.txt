
	public static Boolean checkExistClick(AppiumDriver driver, ExtentTest logger, WebElement elm, String clickYesNo, String waitTimeShortOrLong,
			String objectName_PageName, String ssYesNo) {
		Boolean sRes = false;
		String page[] = new String [2];
		page = objectName_PageName.split("_");
		Report report = new Report();
		try {

			if(waitTimeShortOrLong.equalsIgnoreCase("short") && ssYesNo.equalsIgnoreCase("yes")) {
				waitShort.until(ExpectedConditions.visibilityOf(elm));
				if (elm.isDisplayed()) {
					report.passLogWithSS(driver, logger, page[0]+" is displayed on "+page[1]+" page");
				}
			}else if(waitTimeShortOrLong.equalsIgnoreCase("short") && ssYesNo.equalsIgnoreCase("no")){
				waitShort.until(ExpectedConditions.visibilityOf(elm));
				if (elm.isDisplayed()) {
					report.passLogWithoutSS(logger,"Validate "+page[0], page[0]+" is displayed on "+page[1]+" page");
				}
			} else if(waitTimeShortOrLong.equalsIgnoreCase("long") && ssYesNo.equalsIgnoreCase("yes")){
				waitLong.until(ExpectedConditions.visibilityOf(elm));
				if (elm.isDisplayed()) {
					report.passLogWithSS(driver, logger, page[0]+" is displayed on "+page[1]+" page");
				}
			} else if(waitTimeShortOrLong.equalsIgnoreCase("long") && ssYesNo.equalsIgnoreCase("no")){
				waitLong.until(ExpectedConditions.visibilityOf(elm));
				if (elm.isDisplayed()) {
					report.passLogWithoutSS(logger, "Validate "+page[0], page[0]+" is displayed on "+page[1]+" page");
				}
			}
			sRes = true;
			if (clickYesNo.equalsIgnoreCase("yes")) {
				report.infoLog(logger,"Clicking on "+page[0]);
				if (elm.isEnabled()) {
					elm.click();
				}
			}
		} catch (Exception e) {
			sRes = false;
			report.failLog(driver,logger, page[0]+" is not displayed on "+page[1]+" page");
			return sRes;
		}
		return sRes;
	}



	public static String captureSS(AppiumDriver driver) throws IOException{
		String ss = null;
		try {
			String sCurrentContext,scriptName;
			scriptName = Thread.currentThread().getStackTrace()[1].getClassName();
			sCurrentContext = driver.getContext();
			boolean bOriginalContextWasWebView = false;
			if (sCurrentContext.equals("WEBVIEW_1")) {
				bOriginalContextWasWebView = true;
				driver.context("NATIVE_APP");
			}
			String scrFile = ((TakesScreenshot)driver).getScreenshotAs(OutputType.BASE64);
			ss = "data:image/png;base64,"+scrFile;
			ssCount++;
			if (bOriginalContextWasWebView==true) {
				driver.context("WEBVIEW_1");
			}
		} catch (WebDriverException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return ss;
	}
	
	
			
	public static void Native_ScrollDown(String sTestName, WebElement oEle, String sObjStr) throws HeadlessException, IOException, AWTException, InterruptedException, ClassNotFoundException {
		
		String sDesc = Reporter.log(sTestName)+": Scroll to object : " +sObjStr + " -> ( " + UI.getBy(sObjStr) + " )" ;
		boolean foundFlg = false;
		UI.checkReady(sTestName, oEle);
		
		try{
			
			AppiumDriver lDriver = Utils.getDriver(sTestName);
			while(true) {
				Dimension dimensions = lDriver.manage().window().getSize();
				Double screenHeightStart = dimensions.getHeight() * 0.5;
				Double screenHeightEnd = dimensions.getHeight() * 0.05;
				lDriver.swipe(0, screenHeightStart.intValue(), 0, screenHeightEnd.intValue(), 2000);
				if (UI.isDisplayed(oEle)) {
					foundFlg = true; break;
				}
		   	}
			Reporter.print(sTestName, sDesc + " :: Performed, Found- " + String.valueOf(foundFlg));

		}	catch(Exception e) {
		
			if (Utils.handleIntermediateIssue()) { Native_ScrollDown(sTestName,oEle,sObjStr); }
			Reporter.exceptionHandler(sTestName, e, sDesc);
		}
	}
	
	
	public static Boolean WaitForElement(WebElement elm, String waitTimeShortOrLong) 
	{ 
		try 
		{ 
			boolean Flag = false;

			if(waitTimeShortOrLong.equalsIgnoreCase("short")){
				waitShort.until(ExpectedConditions.visibilityOf(elm));
				if (elm.isDisplayed()) {
					Flag=true;		
				}
			} else if(waitTimeShortOrLong.equalsIgnoreCase("long")){
				waitLong.until(ExpectedConditions.visibilityOf(elm));
				if (elm.isDisplayed()) {
					Flag=true;	
				}
			}

			return Flag;
		} 
		catch (Exception e) 
		{ 
			return false; 
		}

	}
	
	
	public static void GoBack(String sTestName) throws HeadlessException, IOException, AWTException, InterruptedException  {
		
		String sDesc; 
		sDesc = Reporter.log(sTestName);
		UI.checkReady(sTestName, null);
		
		try { 	
			AppiumDriver lDriver = Utils.getDriver(sTestName);
			lDriver.navigate().back();

			Reporter.print(sTestName, sDesc + " :: Performed");
			
		}  catch(Exception e) {
			
	    	if (Utils.handleIntermediateIssue()) { GoBack(sTestName); }
			Reporter.exceptionHandler(sTestName, e, sDesc);
		}
	}
	
	public static void Close(String sTestName) throws HeadlessException, IOException, AWTException, InterruptedException  {
		
		String sDesc; 
		
		sDesc = Reporter.log(sTestName) ;
			
		try { 	
			AppiumDriver lDriver = Utils.getDriver(sTestName);
			lDriver.close();

			Reporter.print(sTestName, sDesc + " :: Performed");
			
		}  catch(Exception e) {
			
	    	if (Utils.handleIntermediateIssue()) { Close(sTestName); }
			Reporter.exceptionHandler(sTestName, e, sDesc);
		}
	}
	
	public static boolean Verify_TextPresent(String sTestName, String sExpText) throws HeadlessException, IOException, AWTException, InterruptedException  {
		
		String sDesc = "", sExpVal; boolean bStatus = false;
		
		try { 
			
			sExpText = UI.validateUserInput(sTestName, sExpText);
			sDesc = Reporter.log(sTestName) + " :: Validating text '" + sExpText + "'";
			sExpVal = Reporter.filterUserInput(sExpText);
			UI.checkReady(sTestName, null);
			
			AppiumDriver lDriver = Utils.getDriver(sTestName);
			
			List<WebElement> oList = lDriver.findElements(By.xpath("//*[contains(text(),'" + sExpVal + "')]"));
			
			if (oList.size() > 0) bStatus = true;
			
			Reporter.print(sTestName, sExpText, sDesc, "NA", "NA", bStatus);
			
		}  catch(Exception e) {
			
	    	if (Utils.handleIntermediateIssue()) { Verify_TextPresent(sTestName, sExpText); }
			Reporter.exceptionHandler(sTestName, e, sDesc);
		}
		return bStatus;
	}
